import discord
from discord.ext import commands
import asyncio
import os
from threading import Thread  # Importado, mas n√£o utilizado no c√≥digo atual

# Configura√ß√£o das intents
intents = discord.Intents.default()
intents.members = True  # Permite que o bot saiba quando membros entram ou saem
intents.message_content = True  # Permite que o bot leia o conte√∫do das mensagens

# Token do bot (deve ser armazenado em uma vari√°vel de ambiente por quest√µes de seguran√ßa)
TOKEN = os.getenv('DISCORD_BOT_TOKEN')

# Inicializa o bot com um prefixo para comandos (! no caso) e as intents configuradas
bot = commands.Bot(command_prefix="!", intents=intents)

# IDs dos canais e cargos
WELCOME_CHANNEL_ID = 1333911042614628412
GENERAL_CHANNEL_ID = 1333916405149597818
ADMIN_CHANNEL_ID = 1271956942641696789
MEMBER_ROLE_ID = 1271948171135684766
ADMIN_ROLE_ID = 1271948171135684763

# Dicion√°rio que armazena as mensagens enviadas para cada usu√°rio
user_messages = {}

# Evento acionado quando o bot se conecta e est√° pronto para operar
@bot.event
async def on_ready():
    print(f'‚úÖ Bot conectado como {bot.user}')  # Imprime no console o nome do bot quando ele est√° pronto

# Fun√ß√£o ass√≠ncrona que envia uma mensagem de boas-vindas com as instru√ß√µes para o novo membro
async def send_welcome_message(member):
    try:
        await asyncio.sleep(5)  # Aguarda 5 segundos antes de enviar a mensagem
        channel = bot.get_channel(WELCOME_CHANNEL_ID)  # Obt√©m o canal de boas-vindas
        admin_role = discord.utils.get(member.guild.roles, id=ADMIN_ROLE_ID)  # Obt√©m o cargo de administrador

        if not channel:
            raise ValueError("Canal de boas-vindas n√£o encontrado.")  # Erro caso o canal n√£o seja encontrado
        if not admin_role:
            raise ValueError("Cargo de administrador n√£o encontrado.")  # Erro caso o cargo n√£o seja encontrado

        # Cria a mensagem de boas-vindas
        embed = discord.Embed(
            title=f"‚öú **BEM-VINDO(A), {member.name}, √Ä FAM√çLIA „Äé7DS„ÄèE-SPORTS!** ‚öú",
            description=(
                "Estamos muito felizes em t√™-lo(a) conosco!\n\n"
                "Nosso cl√£ „Äé7DS„ÄèE-SPORTS √© um grupo de jogadores focados no competitivo e na amizade verdadeira. "
                "Buscamos jogadores ativos que compartilhem do nosso objetivo: **dominar as partidas enquanto nos divertimos** "
                "e criamos la√ßos s√≥lidos. Se voc√™ gosta de desafios, ranqueadas e quer crescer junto com uma equipe organizada, "
                "**voc√™ est√° no lugar certo!**\n\n"
                "üìú **REGRAS DO CL√É E DA COMUNIDADE** üìú\n"
                "‚úÖ **Respeito acima de tudo**: Trate todos os membros com respeito.\n"
                "üö´ **Proibido conte√∫do inapropriado**: N√£o compartilhe mensagens ofensivas.\n"
                "üìµ **Sem spam**: N√£o envie links irrelevantes.\n"
                "üîí **Privacidade e seguran√ßa**: N√£o compartilhe dados pessoais sem consentimento.\n"
                "üè∑ **Tag obrigat√≥ria**: Adicione „Äé7DS„Äè ao seu nickname.\n"
                "üéÆ **Fechar Squad com membros**: Priorize jogar com outros membros do cl√£.\n"
                "‚è≥ **Participa√ß√£o ativa**: Se ficar offline por **15 dias**, poder√° ser removido.\n"
                "‚ùå **Proibido comportamento t√≥xico**: Discuss√µes e brigas n√£o ser√£o toleradas.\n\n"
                "‚öî **Para entrar no cl√£, siga os passos abaixo:**\n"
                "1Ô∏è‚É£ Leia e aceite todas as regras no canal <#1271948171601510555>.\n"
                "2Ô∏è‚É£ Adicione a tag oficial „Äé7DS„Äè no seu nome.\n"
                "3Ô∏è‚É£ Clique no bot√£o **'Aceitar'** abaixo para entrar, ou **'Recusar'** para sair.\n\n"
                "‚ùì Se tiver d√∫vidas, pergunte no canal <#1272070605088493642>.\n"
                "üéÆ Boa sorte e divirta-se! üèÜ"
            ),
            color=discord.Color.purple()  # Define a cor da borda da mensagem de boas-vindas
        )

        # Cria os bot√µes de intera√ß√£o
        view = WelcomeButtons(member)
        # Envia a mensagem de boas-vindas no canal de boas-vindas
        welcome_message = await channel.send(embed=embed, view=view)
        user_messages[member.id] = welcome_message.id  # Armazena o ID da mensagem enviada

    except ValueError as e:
        # Captura e envia uma mensagem de erro se algo n√£o for encontrado (ex.: canal ou cargo)
        print(f"Erro: {e}")
        admin_channel = bot.get_channel(ADMIN_CHANNEL_ID)
        if admin_channel:
            await admin_channel.send(f"üö® Erro ao enviar mensagem de boas-vindas para {member.name}: {e}")
    except Exception as e:
        # Captura qualquer outro erro inesperado e notifica os administradores
        print(f"Erro inesperado: {e}")
        admin_channel = bot.get_channel(ADMIN_CHANNEL_ID)
        if admin_channel:
            await admin_channel.send(f"üö® Erro inesperado ao tentar enviar boas-vindas para {member.name}: {e}")

# Classe que define os bot√µes de intera√ß√£o com o usu√°rio
class WelcomeButtons(discord.ui.View):
    def __init__(self, member):
        super().__init__()
        self.member = member  # Armazena o membro que interagir√° com os bot√µes

    # Bot√£o de Aceitar, que adiciona o cargo de membro ao usu√°rio
    @discord.ui.button(label="Aceitar", style=discord.ButtonStyle.success)
    async def accept(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if interaction.user.id != self.member.id:  # Verifica se o usu√°rio que clicou √© o pr√≥prio membro
                return await interaction.response.send_message("‚ùå Apenas o novo membro pode interagir!", ephemeral=True)

            role = discord.utils.get(self.member.guild.roles, id=MEMBER_ROLE_ID)  # Obt√©m o cargo de membro
            if role:  # Se o cargo de membro for encontrado
                await self.member.add_roles(role)  # Adiciona o cargo ao membro
                await interaction.response.send_message("‚úÖ Voc√™ agora √© um membro oficial do cl√£ „Äé7DS„Äè!", ephemeral=True)
                await asyncio.sleep(5)  # Aguarda 5 segundos antes de enviar a mensagem no canal geral
                general_channel = bot.get_channel(GENERAL_CHANNEL_ID)  # Obt√©m o canal geral
                if general_channel:  # Se o canal geral for encontrado
                    await general_channel.send(f"üéâ Seja bem-vindo(a), {self.member.mention}, oficialmente ao cl√£ „Äé7DS„ÄèE-SPORTS!")
            else:
                await interaction.response.send_message("‚ùå Erro ao adicionar o cargo. Contate um administrador.", ephemeral=True)

        except Exception as e:
            # Caso ocorra algum erro ao tentar adicionar o cargo ou enviar a mensagem
            print(f"Erro ao processar 'Aceitar' para {self.member.name}: {e}")
            await interaction.response.send_message("‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente mais tarde.", ephemeral=True)

    # Bot√£o de Recusar, que remove o usu√°rio do servidor
    @discord.ui.button(label="Recusar", style=discord.ButtonStyle.danger)
    async def decline(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if interaction.user.id != self.member.id:  # Verifica se o usu√°rio que clicou √© o pr√≥prio membro
                return await interaction.response.send_message("‚ùå Apenas o novo membro pode interagir!", ephemeral=True)

            # Envia uma mensagem privada informando que o usu√°rio foi expulso por n√£o aceitar as regras
            await self.member.send("‚ùå Voc√™ foi expulso do servidor por n√£o aceitar as regras. Voc√™ pode tentar novamente quando quiser.")
            await self.member.kick(reason="N√£o aceitou as regras.")  # Expulsa o membro do servidor
            admin_channel = bot.get_channel(ADMIN_CHANNEL_ID)  # Obt√©m o canal administrativo
            if admin_channel:  # Se o canal administrativo for encontrado
                await admin_channel.send(f"üö® {self.member.name} foi expulso por n√£o aceitar as regras.")  # Notifica os administradores
            await interaction.response.send_message("‚ùå Voc√™ foi removido do servidor.", ephemeral=True)

        except Exception as e:
            # Caso ocorra algum erro ao tentar expulsar o membro
            print(f"Erro ao processar 'Recusar' para {self.member.name}: {e}")
            await interaction.response.send_message("‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente mais tarde.", ephemeral=True)

# Evento acionado quando um novo membro entra no servidor
@bot.event
async def on_member_join(member):
    try:
        channel = bot.get_channel(WELCOME_CHANNEL_ID)  # Obt√©m o canal de boas-vindas
        if not channel:
            raise ValueError("Canal de boas-vindas n√£o encontrado.")  # Se o canal n√£o for encontrado, levanta um erro
        await send_welcome_message(member)  # Chama a fun√ß√£o que envia a mensagem de boas-vindas
    except ValueError as e:
        print(f"Erro: {e}")
        admin_channel = bot.get_channel(ADMIN_CHANNEL_ID)
        if admin_channel:
            await admin_channel.send(f"üö® Erro ao processar entrada do membro {member.name}: {e}")
    except Exception as e:
        # Captura qualquer erro inesperado e notifica os administradores
        print(f"Erro inesperado ao processar entrada de {member.name}: {e}")
        admin_channel = bot.get_channel(ADMIN_CHANNEL_ID)
        if admin_channel:
            await admin_channel.send(f"üö® Erro inesperado ao processar entrada de {member.name}: {e}")

# Inicia o bot com o token fornecido
bot.run(TOKEN)
